---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, button = 'Contact us', description = '' } = Astro.props;
const randomId = Math.random().toString(36).slice(2);
---

<form id={randomId}>
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>
<script define:vars={{ formId: randomId }}>
  const form = document.getElementById(formId);
  
  if (form) {
    form.addEventListener("submit", function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const formAction = 'https://formspree.io/f/mblooyqv';
      
      // Check if honeypot field is filled (bot protection)
      if (formData.get("_gotcha")) {
        return; // Silent failure for bots
      }
      
      // Disable the submit button during form submission
      const button = form.querySelector("button[type='submit']");
      if (button) {
        const originalButtonText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = "Sending...";
        
        // Send the form data
        fetch(formAction, {
          method: "POST",
          body: formData,
          headers: {
            Accept: "application/json",
          },
        })
        .then((response) => {
          if (response.ok) {
            // Show success message
            form.innerHTML = `
              <div class="py-12 text-center bg-green-50 dark:bg-green-900 rounded-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 class="mt-4 text-xl font-bold text-gray-900 dark:text-white">Message Sent Successfully!</h3>
                <p class="mt-2 text-gray-600 dark:text-gray-300">Thank you for contacting us. We'll get back to you as soon as possible.</p>
              </div>
            `;
          } else {
            // Show error message
            form.innerHTML = `
              <div class="py-12 text-center bg-red-50 dark:bg-red-900 rounded-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 class="mt-4 text-xl font-bold text-gray-900 dark:text-white">Something Went Wrong</h3>
                <p class="mt-2 text-gray-600 dark:text-gray-300">There was an issue submitting your message. Please try again or contact us directly via email.</p>
                <button onclick="location.reload()" class="mt-6 py-3 px-4 bg-primary text-white font-bold rounded-md hover:bg-primary-900 transition duration-300">Try Again</button>
              </div>
            `;
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          // Reset button state if there's an error
          button.disabled = false;
          button.innerHTML = originalButtonText;
        });
      }
    });
  }
</script>